// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  referralCode  String    @unique @default(cuid())
  referredBy    String?
  balance       Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  referrals     User[]    @relation("UserReferrals")
  referredByUser User?    @relation("UserReferrals", fields: [referredBy], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String?
  category    ProductCategory
  price       Float
  image       String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  transactions Transaction[]
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  productId     String
  customerId    String            // Nomor HP / ID pelanggan
  amount        Float
  status        TransactionStatus @default(PENDING)
  digiflazzRef  String?           // Reference dari Digiflazz
  message       String?           // Pesan dari Digiflazz
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum ProductCategory {
  PULSA
  PAKET_DATA
  TOKEN_PLN
  VOUCHER_GAME
  PASCABAYAR
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}